#!/usr/bin/make -f

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

SHELL    := bash -e

# Much of the work here is to make different upstream versions of Xen
# coinstallable, and arrange to run which ever version of the tools
# corresponds to the running hypervisor.
#
# This packaging produces one version.  The nominal upstream version
# represents the control ABI used by hypervisor management utilities.
#
# In this package that is in (i) debian/control and (ii) the first two
# numbers in the package version in debian/changelog.  These must both
# be updated when a new major upstream version is packaged (eg 4.10 ->
# 4.11).
#
# Only debian/control needs this update; all other files are made from
# simple templates, at package build time, by the rules generated
# from template_rule_template, below.
#
upstream_version := \
 $(shell dpkg-parsechangelog -SVersion | sed 's/\(\.[0-9]*\)\..*/\1/' )

# We take all files named   debian/*.vsn-in
# and do these three things to them:
#  1. substitute @version@ in the file contents with the version
#     number (the one from $(upstream_version))
#  2. replace any V in the file *name* with that same version
#  3. strip .vsn-in from the end
# The resulting files are mainly consumed by dh.

TEMPLATE_FILES := $(wildcard debian/*.vsn-in)

define template_rule_template =
 TEMPLATED_FILES += $(2)
 $(2): $(1) debian/rules debian/changelog
	sed 's/@version@/$(upstream_version)/g' <$$< >$$@.tmp \
	&& mv -f $$@{.tmp,}
endef

$(foreach t,$(TEMPLATE_FILES), $(eval 					\
	$(call 								\
		template_rule_template, $t, 				\
		$(subst V,$(upstream_version), $(basename $t)) 		\
	)))

templated-files: $(TEMPLATED_FILES)
	:

# Work around bug in dpkg-buildpackage: between dpkg 1.14.17 and 1.16.1
# it exports these.  This is a problem because we need to pass different
# options to the hypervisor build - the default options from dpkg
# et al are suitable for dom0 binaries but not for the hypervisor.
undefine CFLAGS
undefine CXXFLAGS
undefine FFLAGS
undefine CPPFLAGS
undefine LDFLAGS

# The Xen build system likes to download things at build-time.  We
# think we have disabled all of that with appropriate configure
# options.  Set these too, so we spot if we miss any.
export WGET=/bin/false GIT=/bin/false

# Architecture handling.
#
# We need to explicitly specify the architecture because the Xen
# upstream build system likes to use `uname' which can produce wrong
# answers it other-bitness chroots, and because we need to build a
# 64-bit hypervisor even on i386 (since there is no 32-bit hypervisor
# anymore).
#
# Xen has its own different architecture names, which are nither
# Debian nor GNU names.

include /usr/share/dpkg/architecture.mk

XENARCH_amd64=x86_64
XENARCH_amd64=x86_64

XEN_ARCH_amd64 = x86_64
XEN_ARCH_i386 = x86_64 # yes, really
XEN_ARCH_armhf = arm32
XEN_ARCH_arm64 = arm64

make_args_common= \
	XEN_COMPILE_ARCH=$(XEN_ARCH_$(DEB_BUILD_ARCH)) \
	XEN_TARGET_ARCH=$(XEN_ARCH_$(DEB_BUILD_ARCH)) \

# Other build flags etc.

t=$(PWD)/debian/tmp

dpkg_CFLAGS   := $(shell dpkg-buildflags --get CFLAGS)
dpkg_CPPFLAGS := $(shell dpkg-buildflags --get CPPFLAGS)
dpkg_LDFLAGS  := $(shell dpkg-buildflags --get LDLAGS)

make_args_xen= $(make_args_common) \

# Xen upstream does not offer a separate CPPFLAGS, so we pass those in
# CFLAGS.

make_args_tools= $(make_args_common) \
	EXTRA_CFLAGS_XEN_TOOLS='$(dpkg_CFLAGS) $(dpkg_CPPFLAGS)' \
	PREPEND_LDFLAGS_XEN_TOOLS='$(dpkg_LDFLAGS)'

# fixme do we need these ?
#	OCAMLDESTDIR=$(CURDIR)/$(BUILD_DIR)/install-utils_$(ARCH)/$(OCAML_STDLIB_DIR) \
#	PYTHON=$(shell pyversions -r)

%:
	dh $@

# Without this, something on stretch passes CFLAGS in the environment
# to the Xen build system, which then (with 4.11) chokes printing
#   /bin/sh: 1: Syntax error: Unterminated quoted string
# probably because the CFLAGS value contains multiple options and
# therefore spaces.  See also the note by `undefine CFLAGS', above.
override_dh_auto_clean:
	$(MAKE) -j1 distclean

override_dh_auto_configure:
	dh_update_autotools_config
	:
	cp debian/xen-kconfig xen/.config
	make -C xen olddefconfig $(make_args_xen)
	:
	$(make_args_tools) ./configure \
		--disable-stubdom \
		--prefix=/usr \
		--includedir=/ousr/include \
		--libdir=/usr/lib/$(DEB_HOST_MULTIARCH) \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--sysconfdir=/etc \
		--localstatedir=/var \
		--with-libexec-leaf-dir=xen-$(VERSION) \
		--disable-blktap1 \
		--disable-blktap2 \
		--disable-ocamltools \
		--disable-qemu-traditional --disable-rombios \
		--with-system-qemu=/usr/bin/qemu-system-i386 \
		--enable-ovmf --with-system-ovmf=/usr/share/ovmf/OVMF.fd \
		--with-system-seabios=/usr/share/seabios/bios-256k.bin

override_dh_auto_build:
	$(MAKE) $(make_args_xen) xen
	$(MAKE) $(make_args_tools) tools docs

override_dh_auto_install: $(TEMPLATED_FILES)
	$(MAKE) $(make_args_xen) DESTDIR=$t install-xen
	$(MAKE) $(make_args_tools) DESTDIR=$t install-{tools,docs}
ifneq ($(filter i386 amd64,$(ARCH)),)
	# hvmloader
	strip --remove-section=.comment --remove-section=.note $(INSTALL_DIR)/usr/lib/xen*/boot/*
endif
	# fixme dh_install debian/templates/xen-hypervisor.bug/* usr/share/bug/$(PACKAGE_NAME)
	# fixme check cp $(DIR)/xen/xen$(IMAGE_SUFFIX) debian/$(PACKAGE_NAME)/boot/xen-$(VERSION)-$(FLAVOUR)$(IMAGE_SUFFIX)
ifeq ($(ARCH),amd64)
	# fixme check cp $(DIR)/xen/xen.efi debian/$(PACKAGE_NAME)/boot/xen-$(VERSION)-$(FLAVOUR).efi
endif
	# fixme dh_install debian/templates/libxen.bug/* usr/share/bug/$(PACKAGE_NAME)
	# Move pkgconfig into a multiarch compliant place
	# fixme mv $(DIR)/usr/share/pkgconfig $(DIR)/usr/lib/$(DEB_HOST_MULTIARCH)/
	# fixme install -D -m644 debian/xen-utils.NEWS $(PACKAGE_DIR)/usr/share/doc/$(PACKAGE_NAME)/NEWS
	# fixme install -D -m644 debian/xen-utils.README.Debian $(PACKAGE_DIR)/usr/share/doc/$(PACKAGE_NAME)/README.Debian
	# fixme cp $(DIR)/usr/sbin/* $(DIR)/usr/lib/xen-$(VERSION)/bin/
	# fixme dh_install debian/templates/xen-utils.bug/* usr/share/bug/$(PACKAGE_NAME)
	#ndh_lintian
	# fixme ( echo -n "misc:Built-Using="; dpkg-query -f='$${source:Package} (= $${source:Version}), ' -W ipxe-qemu seabios; echo ) >> debian/$(PACKAGE_NAME).substvars
